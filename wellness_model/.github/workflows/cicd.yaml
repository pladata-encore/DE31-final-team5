name: CI/CD Pipeline

on:
  push:
    branches:
      - "dev"
  pull_request:
    types: [closed]
    branches:
      - "main"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # AWS ECR 로그인을 위한 설정
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Docker 이미지 빌드 및 태깅
      - name: Build Docker image
        run: |
          docker build -t wellnessmodel:${{ github.sha }} .
          # GitHub SHA로 태그
          docker tag wellnessmodel:${{ github.sha }} ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}
          # latest로 태그
          docker tag wellnessmodel:${{ github.sha }} ${{ secrets.ECR_REPOSITORY_URI }}:latest
      # Docker 이미지 푸시
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ github.sha }}
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest
  deploy_dev:
    name: Deploy to Development on EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # AWS ECR 로그인을 위한 설정 (개발 환경)
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # EC2에 SSH로 연결하여 Docker 이미지 배포 (개발 환경)
      - name: Deploy on Dev EC2
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # ECR에서 최신 Docker 이미지 pull
            docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest
            
            # 기존 컨테이너 중지 및 제거
            docker stop wellness-model || true
            docker rm wellness-model || true
            # 새로운 Docker 컨테이너 실행 (8001 포트로)
            docker run -d -p 8001:8001 \
              --name wellness-model \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              ${{ secrets.ECR_REPOSITORY_URI }}:latest
  deploy_prod:
    name: Deploy to Production on EC2
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # AWS ECR 로그인을 위한 설정 (프로덕션 환경)
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # EC2에 SSH로 연결하여 Docker 이미지 배포 (프로덕션 환경)
      - name: Deploy on Prod EC2
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ secrets.PROD_EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # ECR에서 최신 Docker 이미지 pull
            docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest
            # 기존 컨테이너 중지 및 제거
            docker stop wellness-model || true
            docker rm wellness-model || true
            # 새로운 Docker 컨테이너 실행 (8001 포트로)
            docker run -d -p 8001:8001 \
              --name wellness-model \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              ${{ secrets.ECR_REPOSITORY_URI }}:latest