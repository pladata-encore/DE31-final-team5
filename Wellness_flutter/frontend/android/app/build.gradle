plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def dotenv = new Properties()

def envFile = file("${rootProject.projectDir}/../.env")
if (envFile.exists()) {
    envFile.withInputStream { stream -> dotenv.load(stream)}
} else {
    throw new FileNotFoundException("Could not find .env file at : ${envFile.path}")
}

android {
    namespace = "com.example.frontend"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    defaultConfig {
        applicationId "com.example.frontend"
        minSdkVersion 23
        targetSdkVersion 34  // Flutter SDK에서 사용하는 targetSdkVersion 값 설정
        versionCode 1  // 원하는 버전 코드로 직접 지정
        versionName "1.0"  // 원하는 버전 이름으로 직접 지정
        multiDexEnabled true
        
        def kakaoKey = dotenv['KAKAO_NATIVE_APP_KEY']
        if (kakaoKey == null ) {
            throw new GradleException("KAKAO_NATIVE_APP_KEY not found in .env file")
        }
        manifestPlaceholders = [KAKAO_NATIVE_APP_KEY: kakaoKey]
    }


    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    // Kotlin 표준 라이브러리 추가 (1.8.0 버전)
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
    implementation "com.kakao.sdk:v2-user:2.20.1"
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    // 다른 종속성들 추가
}

